group 'hellovertx'
version '1.0'

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'eclipse'

repositories {
 	mavenLocal()
    mavenCentral()
    maven {
    	url = "https://oss.sonatype.org/content/repositories/snapshots"
    }
}

dependencies { 
	// vertx
    compile group: 'io.vertx', name: 'vertx-core', version: '3.8.5'
    compile group: 'io.vertx', name: 'vertx-web', version: '3.8.5'
    
	// A library for summarizing data in streams for which it is infeasible to store all events 
	compile group: 'com.clearspring.analytics', name: 'stream', version: '2.9.8'
	
	// job scheduling library
	compile group: 'org.quartz-scheduler', name: 'quartz', version: '2.3.2'
	
	// To backup database, we can use AWS Amazon S3 for raw data storage
	compile group: 'com.amazonaws', name: 'aws-java-sdk-s3', version: '1.11.865'
	
	// Gson
	compile group: 'com.google.code.gson', name: 'gson', version: '2.8.2'
	
	// ArangoDB
	compile group: 'com.arangodb', name: 'arangodb-java-driver', version: '6.7.5'
	
	// simple, stupid rules engine 
	compile group: 'org.jeasy', name: 'easy-rules-core', version: '4.0.0'
	compile group: 'org.jeasy', name: 'easy-rules-mvel', version: '4.0.0'
	
	// Guava: Google Core Libraries For Java 
	compile group: 'com.google.guava', name: 'guava', version: '23.0'
    
    testCompile (
    	'org.junit.jupiter:junit-jupiter-engine:5.7.0' 
		,'org.assertj:assertj-core:3.17.2'
		,'org.seleniumhq.selenium:selenium-java:3.141.59'
		
		// generates fake data for testing
		,'com.github.javafaker:javafaker:1.0.2'
		
		// Email Test
		,'com.sun.mail:javax.mail:1.6.2'
    )
}



tasks.jar {
    archiveFileName.set("hello-vertx.jar")
}

tasks.withType(Jar) {
	destinationDir = file("$rootDir/BUILD-OUTPUT")
}


def getClasspathStringJars() {
	def baseFolder = 'deps/'
    def fileNames = []
    configurations.compile.each { File file -> fileNames.add(baseFolder + file.name) }
    
    def classpath = fileNames.join(" ; ")    
    return '. ; ' + classpath + ' ; '
}

// copy dependency libs
task CopyRuntimeLibsFolderToBUILD(type: Copy) {  
  into "BUILD-OUTPUT/deps"  
  from configurations.compile  
}

task buildMainHttpStarter(type: Jar) {	
	dependsOn classes   
    from(sourceSets.main.output) {
        include "**"
    }
    version = '1.0'
    baseName = 'hello-vertx.jar'
    manifest {
   		attributes ('Implementation-Title': 'MainHttpStarter', 
        			'Implementation-Version': version ,
        			'Main-Class': 'hello.vertx.HelloWorld',
        			'Class-Path' : getClasspathStringJars() 
        			)
	}
} 
